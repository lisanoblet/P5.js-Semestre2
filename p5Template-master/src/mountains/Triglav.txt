// -------------------
//  Parameters and UI
// -------------------

const gui = new dat.GUI()
const params = {
    Seed: 17,
    Nombre_de_triangles: 50,
    //Couleur_Rouge: 0,
    //Couleur_Verte: 0,
    //Couleur_Bleue: 0,
    //Nuance_Gris: 0,
    Download_Image: () => save(),
}
gui.add(params, "Seed", 0, 100, 1)
gui.add(params, "Nombre_de_triangles", 0, 200, 1)
//gui.add(params, "Nuance_Gris", 0, 255, 1)
//gui.add(params, "Couleur_Rouge", 0, 255, 1)

//gui.add(params, "Couleur_Verte", 0, 255, 1)

//gui.add(params, "Couleur_Bleue", 0, 255, 1)
gui.add(params, "Download_Image")

// -------------------
//       Drawing
// -------------------

function draw() {

    scale(width/1000, width/1000);

    background('white'); //#fff1fb

    //randomSeed(6)
    randomSeed(params.Seed)
    //line(debutx, debuty, random(height), random(width));

    noFill();


    // Points pour les lignes du haut
    let P1X = 0;
    let P1Y = 81 - 20;

    let P2X = 34;
    let P2Y = 119 - 20;

    let P3X = 57;
    let P3Y = 88 - 20;

    let P4X = 74;
    let P4Y = 100 - 20;

    let P5X = 93;
    let P5Y = 94 - 20;

    let P6X = 109;
    let P6Y = 110 - 20;

    let P7X = 120;
    let P7Y = 105 - 20;

    let P8X = 140;
    let P8Y = 140 - 20;

    let P9X = 166;
    let P9Y = 158 - 20;

    let P10X = 175;
    let P10Y = 153 - 20;

    let P11X = 202;
    let P11Y = 178 - 20;

    let P12X = 215;
    let P12Y = 166 - 20;

    let P13X = 224;
    let P13Y = 182 - 20;

    let P14X = 254;
    let P14Y = 202 - 20;

    let P15X = 272;
    let P15Y = 185 - 20;

    let P16X = 304;
    let P16Y = 218 - 20;

    let P17X = 313;
    let P17Y = 218 - 20;

    let P18X = 348;
    let P18Y = 267 - 20;

    let P19X = 396;
    let P19Y = 292 - 20;

    let P20X = 441;
    let P20Y = 330 - 20;

    let P21X = 481;
    let P21Y = 362 - 20;

    let P22X = 493;
    let P22Y = 350 - 20;

    let P23X = 500;
    let P23Y = 356 - 20;

    let P24X = 510;
    let P24Y = 336 - 20;

    let P25X = 549;
    let P25Y = 340 - 20;

    let P26X = 591;
    let P26Y = 304 - 20;

    let P27X = 623;
    let P27Y = 344 - 20;

    let P28X = 639;
    let P28Y = 338 - 20;

    let P29X = 644;
    let P29Y = 347 - 20;

    let P30X = 654;
    let P30Y = 338 - 20;

    let P31X = 660;
    let P31Y = 349 - 20;

    let P32X = 666;
    let P32Y = 344 - 20;

    let P33X = 682;
    let P33Y = 356 - 20;

    let P34X = 698;
    let P34Y = 320 - 20;

    let P35X = 714;
    let P35Y = 302 - 20;

    let P36X = 737;
    let P36Y = 287 - 20;

    let P37X = 758;
    let P37Y = 289 - 20;

    let P38X = 771;
    let P38Y = 301 - 20;

    let P39X = 782;
    let P39Y = 287 - 20;

    let P40X = 798;
    let P40Y = 284 - 20;

    let P41X = 811;
    let P41Y = 266 - 20;

    let P42X = 821;
    let P42Y = 279 - 20;

    let P43X = 829;
    let P43Y = 268 - 20;

    let P44X = 837;
    let P44Y = 264 - 20;

    let P45X = 849;
    let P45Y = 241 - 20;

    let P46X = 885;
    let P46Y = 256 - 20;

    let P47X = 896;
    let P47Y = 249 - 20;

    let P48X = 917;
    let P48Y = 260 - 20;

    let P49X = 925;
    let P49Y = 254 - 20;

    let P50X = 1000;
    let P50Y = 277 - 20;





  
    /*
        let P13X = 1100;
        let P13Y = 420;

        let P14X = 400;
        let P14Y = 250;
    */
    // Création des lignes du haut


    strokeWeight(1.25);
    line(P1X, P1Y, P2X, P2Y);
    line(P2X, P2Y, P3X, P3Y);
    line(P3X, P3Y, P4X, P4Y);
    line(P4X, P4Y, P5X, P5Y);
    line(P5X, P5Y, P6X, P6Y);
    line(P6X, P6Y, P7X, P7Y);
    line(P7X, P7Y, P8X, P8Y);
    line(P8X, P8Y, P9X, P9Y);
    line(P9X, P9Y, P10X, P10Y);
    line(P10X, P10Y, P11X, P11Y);
    line(P11X, P11Y, P12X, P12Y);

    line(P12X, P12Y, P13X, P13Y);
    line(P13X, P13Y, P14X, P14Y);
    line(P14X, P14Y, P15X, P15Y);
    line(P15X, P15Y, P16X, P16Y);
    line(P16X, P16Y, P17X, P17Y);
    line(P17X, P17Y, P18X, P18Y);
    line(P18X, P18Y, P19X, P19Y);
    line(P19X, P19Y, P20X, P20Y);
    line(P20X, P20Y, P21X, P21Y);
    line(P21X, P21Y, P22X, P22Y);
    line(P22X, P22Y, P23X, P23Y);

    line(P23X, P23Y, P24X, P24Y);
    line(P24X, P24Y, P25X, P25Y);
    line(P25X, P25Y, P26X, P26Y);
    line(P26X, P26Y, P27X, P27Y);

    line(P27X, P27Y, P28X, P28Y);
    line(P28X, P28Y, P29X, P29Y);
    line(P29X, P29Y, P30X, P30Y);

    line(P30X, P30Y, P31X, P31Y);

    line(P31X, P31Y, P32X, P32Y);
    line(P32X, P32Y, P33X, P33Y);
    line(P33X, P33Y, P34X, P34Y);
    line(P34X, P34Y, P35X, P35Y);

    line(P35X, P35Y, P36X, P36Y);
    line(P36X, P36Y, P37X, P37Y);
    line(P37X, P37Y, P38X, P38Y);

    line(P38X, P38Y, P39X, P39Y);
    line(P39X, P39Y, P40X, P40Y);

    line(P40X, P40Y, P41X, P41Y);
    line(P41X, P41Y, P42X, P42Y);
    line(P42X, P42Y, P43X, P43Y);

    line(P43X, P43Y, P44X, P44Y);
    line(P44X, P44Y, P45X, P45Y);
    line(P45X, P45Y, P46X, P46Y);

    line(P46X, P46Y, P47X, P47Y);
    line(P47X, P47Y, P48X, P48Y);
    line(P48X, P48Y, P49X, P49Y);
    line(P49X, P49Y, P50X, P50Y);


  


    // Création des triangles pour chaque segment
    /* Les lignes créées au dessus me servent de limites pour définir la montagne
    Les deux points me permettent de trouver l'équation de la droite, ce qui me permet ensuite de trouver des coordonnées aléatoires de x et y à placer afin que les triangles aient toujours au moins un point touchant les droites.
    */
    // INTERVALLE 1
    strokeWeight(1);

    // APPEL DES FONCTIONS DE CREATION DES TRIANGLES
    //draw_some_triangles(params.Nombre_de_triangles, P1X, P1Y, P2X, P2Y);

    draw_some_triangles(P1X, P1Y, P2X, P2Y);

    draw_some_triangles(P2X, P2Y, P3X, P3Y);

    draw_some_triangles(P3X, P3Y, P4X, P4Y);

    draw_some_triangles(P4X, P4Y, P5X, P5Y);

    draw_some_triangles(P5X, P5Y, P6X, P6Y);

    draw_some_triangles(P6X, P6Y, P7X, P7Y);

    draw_some_triangles(P7X, P7Y, P8X, P8Y);

    draw_some_triangles(P8X, P8Y, P9X, P9Y);

    draw_some_triangles(P9X, P9Y, P10X, P10Y);

    draw_some_triangles(P10X, P10Y, P11X, P11Y);

    draw_some_triangles(P11X, P11Y, P12X, P12Y);

    draw_some_triangles(P12X, P12Y, P13X, P13Y);

    draw_some_triangles(P13X, P13Y, P14X, P14Y);

    draw_some_triangles(P14X, P14Y, P15X, P15Y);

    draw_some_triangles(P15X, P15Y, P16X, P16Y);

    draw_some_triangles(P16X, P16Y, P17X, P17Y);

    draw_some_triangles(P17X, P17Y, P18X, P18Y);

    draw_some_triangles(P18X, P18Y, P19X, P19Y);

    draw_some_triangles(P19X, P19Y, P20X, P20Y);

    draw_some_triangles(P20X, P20Y, P21X, P21Y);

    draw_some_triangles(P21X, P21Y, P22X, P22Y);

    draw_some_triangles(P22X, P22Y, P23X, P23Y);

    draw_some_triangles(P23X, P23Y, P24X, P24Y);

    draw_some_triangles(P24X, P24Y, P25X, P25Y);

    draw_some_triangles(P25X, P25Y, P26X, P26Y);

    draw_some_triangles(P26X, P26Y, P27X, P27Y);

    draw_some_triangles(P27X, P27Y, P28X, P28Y);

    draw_some_triangles(P28X, P28Y, P29X, P29Y);

    draw_some_triangles(P29X, P29Y, P30X, P30Y);

    draw_some_triangles(P30X, P30Y, P31X, P31Y);

    draw_some_triangles(P31X, P31Y, P32X, P32Y);

    draw_some_triangles(P32X, P32Y, P33X, P33Y);

    draw_some_triangles(P33X, P33Y, P34X, P34Y);

    draw_some_triangles(P34X, P34Y, P35X, P35Y);

    draw_some_triangles(P35X, P35Y, P36X, P36Y);

    draw_some_triangles(P36X, P36Y, P37X, P37Y);

    draw_some_triangles(P37X, P37Y, P38X, P38Y);

    draw_some_triangles(P38X, P38Y, P39X, P39Y);

    draw_some_triangles(P39X, P39Y, P40X, P40Y);

    draw_some_triangles(P40X, P40Y, P41X, P41Y);

    draw_some_triangles(P41X, P41Y, P42X, P42Y);

    draw_some_triangles(P42X, P42Y, P43X, P43Y);

    draw_some_triangles(P43X, P43Y, P44X, P44Y);

    draw_some_triangles(P44X, P44Y, P45X, P45Y);

    draw_some_triangles(P45X, P45Y, P46X, P46Y);

    draw_some_triangles(P46X, P46Y, P47X, P47Y);

    draw_some_triangles(P47X, P47Y, P48X, P48Y);

    draw_some_triangles(P48X, P48Y, P49X, P49Y);
    draw_some_triangles(P49X, P49Y, P50X, P50Y);


  
}


function draw_some_triangles(x_start, y_start, x_end, y_end) {

    //les triangles sont contenus dans des intervalles qui sont proportionnelles à chaque segment 
    //je les calcule grace a la fonction
    let longueurIntervalle = calculLongueurIntervalle(x_start, y_start, x_end, y_end);

    // coordonnées des points x à ne pas dépasser pour les intervalles des segments
    let minX = longueurIntervalle[0];
    let maxX = longueurIntervalle[1];
    let longueur = longueurIntervalle[2];


    // pour éviter une densité très très importante sur les petits segments, je rajoute une condition pour diminuer le nombre de triangles
    if (longueur > 80) {

        for (let i = 0; i <= params.Nombre_de_triangles; i++) { //60
            let XetY = returnXetY(x_start, y_start, x_end, y_end);
            //coordonnées de x et y le premier point du triangle sur la droite 
            let newX = XetY[0];
            let newY = XetY[1];

            // je change les valeurs des y pour avoir des hauteurs différentes comme sur l'oeuvre originale mais proportionnelles de ce qu'il y a au dessus sans dépasser la ligne 
            triangle(newX, newY, random(minX, maxX), random(y_start + 120, y_start + 500), random(minX, maxX), random(y_start + 120, y_start + 500));
        }
    } else {
        for (let i = 0; i <= params.Nombre_de_triangles / 4; i++) { //60
            let XetY = returnXetY(x_start, y_start, x_end, y_end);

            let newX = XetY[0];
            let newY = XetY[1];

            triangle(newX, newY, random(minX, maxX), random(y_start + 120, y_start + 500), random(minX, maxX), random(y_start + 120, y_start + 500));
        }
    }
}


// retourne les coordonnées du premier point du triangle qui est sur la droite 
function returnXetY(P1X, P1Y, P2X, P2Y) {
    let coeff = (P2Y - P1Y) / (P2X - P1X);
    let n = random();
    let x = (P2X - P1X) * n + P1X;
    let y = coeff * (x - P1X) + P1Y;
    //let longueur = sqrt((P2X - P1X)*(P2X - P1X) + (P2Y - P1Y)*(P2Y - P1Y));
    //let longueurIntervalle = longueur * longueur;

    return [x, y];
}

//permet de calculer les intervalles pour chaque segment pour que ce soit proportionnel à sa longueur
function calculLongueurIntervalle(P1X, P1Y, P2X, P2Y) {
    let longueur = sqrt((P2X - P1X) * (P2X - P1X) + (P2Y - P1Y) * (P2Y - P1Y));
    //let longueurIntervalle = longueur * 4;

    let minXIntervalle = P1X - (longueur / 2);
    let maxXIntervalle = P2X + (longueur / 2);

    return [minXIntervalle, maxXIntervalle, longueur];
}

// -------------------
//    Initialization
// -------------------

function setup() {
    p6_CreateCanvas()
}

function windowResized() {
    p6_ResizeCanvas()
}